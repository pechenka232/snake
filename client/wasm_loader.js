async function loadWASM() {
    console.log("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º WASM...");
    
    try {
        const response = await fetch("zk_snake_proof.wasm");

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WASM: ${response.status} ${response.statusText}`);
        }

        const { instance } = await WebAssembly.instantiateStreaming(response);

        if (!instance.exports.verify_score) {
            throw new Error("‚ùå –§—É–Ω–∫—Ü–∏—è verify_score –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ WASM.");
        }

        // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
        window.verify_score = instance.exports.verify_score;
        
        console.log("‚úÖ WASM –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        console.log("üöÄ WASM –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ WASM:", error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É WASM
loadWASM();
